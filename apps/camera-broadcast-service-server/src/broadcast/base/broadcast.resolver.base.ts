/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Broadcast } from "./Broadcast";
import { BroadcastCountArgs } from "./BroadcastCountArgs";
import { BroadcastFindManyArgs } from "./BroadcastFindManyArgs";
import { BroadcastFindUniqueArgs } from "./BroadcastFindUniqueArgs";
import { CreateBroadcastArgs } from "./CreateBroadcastArgs";
import { UpdateBroadcastArgs } from "./UpdateBroadcastArgs";
import { DeleteBroadcastArgs } from "./DeleteBroadcastArgs";
import { BroadcastService } from "../broadcast.service";
@graphql.Resolver(() => Broadcast)
export class BroadcastResolverBase {
  constructor(protected readonly service: BroadcastService) {}

  async _broadcastsMeta(
    @graphql.Args() args: BroadcastCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Broadcast])
  async broadcasts(
    @graphql.Args() args: BroadcastFindManyArgs
  ): Promise<Broadcast[]> {
    return this.service.broadcasts(args);
  }

  @graphql.Query(() => Broadcast, { nullable: true })
  async broadcast(
    @graphql.Args() args: BroadcastFindUniqueArgs
  ): Promise<Broadcast | null> {
    const result = await this.service.broadcast(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Broadcast)
  async createBroadcast(
    @graphql.Args() args: CreateBroadcastArgs
  ): Promise<Broadcast> {
    return await this.service.createBroadcast({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Broadcast)
  async updateBroadcast(
    @graphql.Args() args: UpdateBroadcastArgs
  ): Promise<Broadcast | null> {
    try {
      return await this.service.updateBroadcast({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Broadcast)
  async deleteBroadcast(
    @graphql.Args() args: DeleteBroadcastArgs
  ): Promise<Broadcast | null> {
    try {
      return await this.service.deleteBroadcast(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
