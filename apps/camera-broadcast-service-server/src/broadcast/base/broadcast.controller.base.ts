/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BroadcastService } from "../broadcast.service";
import { BroadcastCreateInput } from "./BroadcastCreateInput";
import { Broadcast } from "./Broadcast";
import { BroadcastFindManyArgs } from "./BroadcastFindManyArgs";
import { BroadcastWhereUniqueInput } from "./BroadcastWhereUniqueInput";
import { BroadcastUpdateInput } from "./BroadcastUpdateInput";

export class BroadcastControllerBase {
  constructor(protected readonly service: BroadcastService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Broadcast })
  async createBroadcast(
    @common.Body() data: BroadcastCreateInput
  ): Promise<Broadcast> {
    return await this.service.createBroadcast({
      data: data,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Broadcast] })
  @ApiNestedQuery(BroadcastFindManyArgs)
  async broadcasts(@common.Req() request: Request): Promise<Broadcast[]> {
    const args = plainToClass(BroadcastFindManyArgs, request.query);
    return this.service.broadcasts({
      ...args,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Broadcast })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async broadcast(
    @common.Param() params: BroadcastWhereUniqueInput
  ): Promise<Broadcast | null> {
    const result = await this.service.broadcast({
      where: params,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Broadcast })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBroadcast(
    @common.Param() params: BroadcastWhereUniqueInput,
    @common.Body() data: BroadcastUpdateInput
  ): Promise<Broadcast | null> {
    try {
      return await this.service.updateBroadcast({
        where: params,
        data: data,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          startTime: true,
          status: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Broadcast })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBroadcast(
    @common.Param() params: BroadcastWhereUniqueInput
  ): Promise<Broadcast | null> {
    try {
      return await this.service.deleteBroadcast({
        where: params,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          startTime: true,
          status: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
