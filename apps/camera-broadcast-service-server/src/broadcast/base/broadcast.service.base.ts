/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Broadcast as PrismaBroadcast } from "@prisma/client";

export class BroadcastServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BroadcastCountArgs, "select">
  ): Promise<number> {
    return this.prisma.broadcast.count(args);
  }

  async broadcasts<T extends Prisma.BroadcastFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BroadcastFindManyArgs>
  ): Promise<PrismaBroadcast[]> {
    return this.prisma.broadcast.findMany<Prisma.BroadcastFindManyArgs>(args);
  }
  async broadcast<T extends Prisma.BroadcastFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BroadcastFindUniqueArgs>
  ): Promise<PrismaBroadcast | null> {
    return this.prisma.broadcast.findUnique(args);
  }
  async createBroadcast<T extends Prisma.BroadcastCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BroadcastCreateArgs>
  ): Promise<PrismaBroadcast> {
    return this.prisma.broadcast.create<T>(args);
  }
  async updateBroadcast<T extends Prisma.BroadcastUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BroadcastUpdateArgs>
  ): Promise<PrismaBroadcast> {
    return this.prisma.broadcast.update<T>(args);
  }
  async deleteBroadcast<T extends Prisma.BroadcastDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BroadcastDeleteArgs>
  ): Promise<PrismaBroadcast> {
    return this.prisma.broadcast.delete(args);
  }
}
