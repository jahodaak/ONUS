/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Camera as PrismaCamera } from "@prisma/client";

export class CameraServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CameraCountArgs, "select">): Promise<number> {
    return this.prisma.camera.count(args);
  }

  async cameras<T extends Prisma.CameraFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CameraFindManyArgs>
  ): Promise<PrismaCamera[]> {
    return this.prisma.camera.findMany<Prisma.CameraFindManyArgs>(args);
  }
  async camera<T extends Prisma.CameraFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CameraFindUniqueArgs>
  ): Promise<PrismaCamera | null> {
    return this.prisma.camera.findUnique(args);
  }
  async createCamera<T extends Prisma.CameraCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CameraCreateArgs>
  ): Promise<PrismaCamera> {
    return this.prisma.camera.create<T>(args);
  }
  async updateCamera<T extends Prisma.CameraUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CameraUpdateArgs>
  ): Promise<PrismaCamera> {
    return this.prisma.camera.update<T>(args);
  }
  async deleteCamera<T extends Prisma.CameraDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CameraDeleteArgs>
  ): Promise<PrismaCamera> {
    return this.prisma.camera.delete(args);
  }
}
