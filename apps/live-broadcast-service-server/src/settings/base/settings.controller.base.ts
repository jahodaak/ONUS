/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SettingsService } from "../settings.service";
import { SettingsCreateInput } from "./SettingsCreateInput";
import { Settings } from "./Settings";
import { SettingsFindManyArgs } from "./SettingsFindManyArgs";
import { SettingsWhereUniqueInput } from "./SettingsWhereUniqueInput";
import { SettingsUpdateInput } from "./SettingsUpdateInput";

export class SettingsControllerBase {
  constructor(protected readonly service: SettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Settings })
  async createSettings(
    @common.Body() data: SettingsCreateInput
  ): Promise<Settings> {
    return await this.service.createSettings({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Settings] })
  @ApiNestedQuery(SettingsFindManyArgs)
  async settingsItems(@common.Req() request: Request): Promise<Settings[]> {
    const args = plainToClass(SettingsFindManyArgs, request.query);
    return this.service.settingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Settings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async settings(
    @common.Param() params: SettingsWhereUniqueInput
  ): Promise<Settings | null> {
    const result = await this.service.settings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Settings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSettings(
    @common.Param() params: SettingsWhereUniqueInput,
    @common.Body() data: SettingsUpdateInput
  ): Promise<Settings | null> {
    try {
      return await this.service.updateSettings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Settings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSettings(
    @common.Param() params: SettingsWhereUniqueInput
  ): Promise<Settings | null> {
    try {
      return await this.service.deleteSettings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
